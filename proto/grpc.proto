syntax = "proto3";
package grpc;
import "google/protobuf/timestamp.proto";

//Scheduler service
service RpcService {
    rpc queryFlight (QueryFlightRequest) returns (QueryFlightResponse);
    rpc confirmItinerary (ConfirmItineraryRequest) returns (ConfirmItineraryResponse);
    rpc cancelItinerary (Id) returns (CancelItineraryResponse);
    rpc isReady (ReadyRequest) returns (ReadyResponse);
}

// QueryFlightRequest
message QueryFlightRequest {
    //is_cargo - true if cargo mission, false if people transport
    bool isCargo = 1;
    //persons - number of people for transport
    optional uint32 persons = 2;
    //weight in grams
    optional uint32 weightGrams = 3;
    //requested earliest time of departure - beginning of the time window in which we search for a flight
    google.protobuf.Timestamp earliestDepartureTime = 4;
    //requested preferred time of arrival - end of the time window in which we search for a flight
    google.protobuf.Timestamp latestArrivalTime = 5;
    //vertiport_depart_id
    string vertiport_depart_id = 6;
    //vertiport_depart_id
    string vertiport_arrive_id = 7;
}

// Confirms an itinerary by ID
message ConfirmItineraryRequest {
    // The ID of the itinerary being confirmed
    string id = 1;
    // The ID of the user confirming the itinerary
    string user_id = 2;
}

// Flight Status Enum
enum FlightStatus{
    //READY
    READY = 0;
    //BOARDING
    BOARDING = 1;
    //IN_FLIGHT
    IN_FLIGHT = 3;
    //FINISHED
    FINISHED = 4;
    //CANCELLED
    CANCELLED = 5;
    //DRAFT
    DRAFT = 6;
}

// Flight Priority Enum
enum FlightPriority{
    //LOW
    LOW = 0;
    //HIGH
    HIGH = 1;
    //EMERGENCY
    EMERGENCY = 2;
}

//QueryFlightPlan
message QueryFlightPlan {
    //id of the flight
    string id = 1;
    //pilot_id
    string pilot_id = 2;
    //vehicle_id
    string vehicle_id = 3;
    //cargo
    repeated uint32 cargo = 4;
    //weather_conditions
    string weather_conditions = 5;
    //vertiport_depart_id
    string vertiport_depart_id = 6;
    //pad_depart_id
    string pad_depart_id = 7;
    //vertiport_arrive_id
    string vertiport_arrive_id = 8;
    //pad_arrive_id
    string pad_arrive_id = 9;
    //estimated_departure
    google.protobuf.Timestamp estimated_departure = 10;
    //estimated_arrival
    google.protobuf.Timestamp estimated_arrival = 11;
    //actual_departure
    optional google.protobuf.Timestamp actual_departure = 12;
    //actual_arrival
    optional google.protobuf.Timestamp actual_arrival = 13;
    //flight_release_approval
    optional google.protobuf.Timestamp flight_release_approval = 14;
    //flight_plan_submitted
    optional google.protobuf.Timestamp flight_plan_submitted = 15;
    //flightStatus
    FlightStatus flightStatus = 16;
    //flightPriority
    FlightPriority flightPriority = 17;
    //estimated distance in meters
    uint32 estimated_distance = 18;

}

// Itinerary includes id, flight plan and potential deadhead flights
message Itinerary {
    // itinerary id
    string id = 1;
    //flight_plan
    QueryFlightPlan flight_plan = 2;
    //deadhead flight plans
    repeated QueryFlightPlan deadhead_flight_plans = 3;
}

//QueryFlightResponse
message QueryFlightResponse {
    //array/vector of itineraries items
    repeated Itinerary itineraries = 1;
}

//ConfirmItineraryResponse
message ConfirmItineraryResponse{
    //id of the itinerary
    string id = 1;
    //indicates if confirmation was successful
    bool confirmed = 2;
    //time when the flight was confirmed
    google.protobuf.Timestamp confirmationTime = 3;
}
//CancelItineraryResponse
message CancelItineraryResponse{
    //id of the itinerary
    string id = 1;
    //indicates if cancellation was successful
    bool cancelled = 2;
    //time when the flight was cancelled
    google.protobuf.Timestamp cancellationTime = 3;
    //reason of cancellation
    string reason = 4;
}

// Identification (typically UUID)
message Id {
    // The ID of the itinerary or flight plan
    string id = 1;
}

// Ready Request
message ReadyRequest {
    // No arguments
}

// Ready Response
message ReadyResponse {
    // ready
    bool ready = 1;
}
